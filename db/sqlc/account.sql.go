// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (name, balance, currency) VALUES ($1, $2, $3)
`

func (q *Queries) CreateAccount(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAccount)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT name, balance, currency, isdeleted, createdat, updatedat, id FROM accounts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount)
	var i Account
	err := row.Scan(
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.Isdeleted,
		&i.Createdat,
		&i.Updatedat,
		&i.ID,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT name, balance, currency, isdeleted, createdat, updatedat, id FROM accounts ORDER BY id
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.Isdeleted,
			&i.Createdat,
			&i.Updatedat,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :execresult
UPDATE accounts SET balance = balance + $2 WHERE id = $1
`

func (q *Queries) UpdateAccountBalance(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccountBalance)
}

const updateAccountDetails = `-- name: UpdateAccountDetails :execresult
UPDATE accounts SET name = $2 WHERE id = $1
`

func (q *Queries) UpdateAccountDetails(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccountDetails)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (name, balance, currency) VALUES (?, ?, ?)
`

type CreateAccountParams struct {
	Name     string  `json:"name"`
	Balance  float64 `json:"balance"`
	Currency string  `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, arg.Name, arg.Balance, arg.Currency)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT name, balance, currency, isdeleted, createdat, updatedat, id FROM accounts WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id uint64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.Isdeleted,
		&i.Createdat,
		&i.Updatedat,
		&i.ID,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT name, balance, currency, isdeleted, createdat, updatedat, id FROM accounts ORDER BY id LIMIT ?, ?
`

type ListAccountsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.Isdeleted,
			&i.Createdat,
			&i.Updatedat,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :execresult
UPDATE accounts SET balance = balance + ? WHERE id = ?
`

type UpdateAccountBalanceParams struct {
	Balance float64 `json:"balance"`
	ID      uint64  `json:"id"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccountBalance, arg.Balance, arg.ID)
}

const updateAccountDetails = `-- name: UpdateAccountDetails :execresult
UPDATE accounts SET name = ? WHERE id = ?
`

type UpdateAccountDetailsParams struct {
	Name string `json:"name"`
	ID   uint64 `json:"id"`
}

func (q *Queries) UpdateAccountDetails(ctx context.Context, arg UpdateAccountDetailsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccountDetails, arg.Name, arg.ID)
}

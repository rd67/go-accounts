// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry.sql

package db

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :execresult
INSERT INTO entries (account_id, amount, currency, exchange_rate) VALUES ($1, $2, $3, $4)
`

func (q *Queries) CreateEntry(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEntry)
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteEntry)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT account_id, amount, currency, exchange_rate, isdeleted, createdat, updatedat, id FROM entries WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry)
	var i Entry
	err := row.Scan(
		&i.AccountID,
		&i.Amount,
		&i.Currency,
		&i.ExchangeRate,
		&i.Isdeleted,
		&i.Createdat,
		&i.Updatedat,
		&i.ID,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT account_id, amount, currency, exchange_rate, isdeleted, createdat, updatedat, id FROM entries ORDER BY id LIMIT ?, ?
`

type ListEntriesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.AccountID,
			&i.Amount,
			&i.Currency,
			&i.ExchangeRate,
			&i.Isdeleted,
			&i.Createdat,
			&i.Updatedat,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :execresult
UPDATE entries SET account_id = $2, amount = $3, currency = $4, exchange_rate = $5 WHERE id = $1
`

func (q *Queries) UpdateEntry(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateEntry)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfers.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  sender_account_id, receiver_account_id, amount
) VALUES (
  $1, $2, $3
)
RETURNING id, sender_account_id, receiver_account_id, amount, "createdAt", "updatedAt", "isDeleted"
`

type CreateTransferParams struct {
	SenderAccountID   int64 `json:"sender_account_id"`
	ReceiverAccountID int64 `json:"receiver_account_id"`
	Amount            int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.SenderAccountID, arg.ReceiverAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SenderAccountID,
		&i.ReceiverAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :one
UPDATE transfers
  set "isDeleted" = true, "updatedAt" = now()
WHERE id = $1
RETURNING id, sender_account_id, receiver_account_id, amount, "createdAt", "updatedAt", "isDeleted"
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, deleteTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SenderAccountID,
		&i.ReceiverAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, sender_account_id, receiver_account_id, amount, "createdAt", "updatedAt", "isDeleted" FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SenderAccountID,
		&i.ReceiverAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, sender_account_id, receiver_account_id, amount, "createdAt", "updatedAt", "isDeleted" FROM transfers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.SenderAccountID,
			&i.ReceiverAccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE transfers
  set sender_account_id = $2, receiver_account_id= $3, amount = $4
WHERE id = $1
RETURNING id, sender_account_id, receiver_account_id, amount, "createdAt", "updatedAt", "isDeleted"
`

type UpdateTransferParams struct {
	ID                int64 `json:"id"`
	SenderAccountID   int64 `json:"sender_account_id"`
	ReceiverAccountID int64 `json:"receiver_account_id"`
	Amount            int64 `json:"amount"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransfer,
		arg.ID,
		arg.SenderAccountID,
		arg.ReceiverAccountID,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SenderAccountID,
		&i.ReceiverAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

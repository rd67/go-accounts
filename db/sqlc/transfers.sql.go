// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfers.sql

package db

import (
	"context"
	"database/sql"
)

const createTransfer = `-- name: CreateTransfer :execresult
INSERT INTO transfers (sender_account_id, receiver_account_id, amount, currency, exchange_rate, status) VALUES ($1, $2, $3, $4, $5, $6)
`

func (q *Queries) CreateTransfer(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTransfer)
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM transfers WHERE id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer)
	return err
}

const getTransfer = `-- name: GetTransfer :one
SELECT sender_account_id, receiver_account_id, amount, currency, exchange_rate, status, createdat, updatedat, id FROM transfers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer)
	var i Transfer
	err := row.Scan(
		&i.SenderAccountID,
		&i.ReceiverAccountID,
		&i.Amount,
		&i.Currency,
		&i.ExchangeRate,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
		&i.ID,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT sender_account_id, receiver_account_id, amount, currency, exchange_rate, status, createdat, updatedat, id FROM transfers ORDER BY id LIMIT ?, ?
`

type ListTransfersParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.SenderAccountID,
			&i.ReceiverAccountID,
			&i.Amount,
			&i.Currency,
			&i.ExchangeRate,
			&i.Status,
			&i.Createdat,
			&i.Updatedat,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :execresult
UPDATE transfers SET sender_account_id = $2, receiver_account_id= $3, amount = $4, currency = $5, exchange_rate = $6, status = $7 WHERE id = $1
`

func (q *Queries) UpdateTransfer(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTransfer)
}
